# ArgoCD Configuration
# Version: 8.1.3
# Documentation: https://argo-cd.readthedocs.io/

# Global configuration
global:
  # Additional labels for all resources
  domain: argocd.cicd.bitsb.dev
  additionalLabels:
    app.kubernetes.io/part-of: argocd

# Server configuration
server:
  
  # Ingress configuration (HTTPS only)
  ingress:
    enabled: true
    ingressClassName: kong
    hosts:
      - argocd.cicd.bitsb.dev
    paths:
      - /
    pathType: Prefix
    annotations:
      # cert-manager annotations
      cert-manager.io/cluster-issuer: "bitsb-root-ca-issuer"
      cert-manager.io/common-name: "argocd.cicd.bitsb.dev"
      # Kong ingress annotations - correct syntax from your reference
      konghq.com/protocols: "https"
      konghq.com/https-redirect-status-code: "301"
    tls:
      - secretName: argocd-tls
        hosts:
          - argocd.cicd.bitsb.dev
  
  # Resource configuration
  resources:
    requests:
      cpu: "100m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  
  # Security configuration
  extraArgs:
    - --insecure  # Allows Argo CD to work correctly with reverse proxies

# Configurations for ArgoCD
configs:
  # Repository credentials (can be configured later)
  repositories: {}
  
  # Cluster configurations (can be configured later) 
  clusters: {}
  
  # RBAC configurations
  rbac:
    # Default policy
    policy.default: role:readonly
    # CSV format for policy rules
    policy.csv: |
      g, argocd-admins, role:admin
  
  # Server configuration
  cm:
    # URL for accessing ArgoCD
    url: https://argocd.cicd.bitsb.dev
    # Git configuration
    timeout.reconciliation: 180s
    # Application configuration
    application.instanceLabelKey: argocd.argoproj.io/instance
    
  # Parameters for server
  params:
    # Base href and root path for reverse proxy
    server.basehref: "/"
    server.rootpath: ""
    # Application controller settings
    controller.status.processors: 20
    controller.operation.processors: 10
    controller.self.heal.timeout.seconds: 5
    controller.repo.server.timeout.seconds: 60

# Application controller configuration
controller:
  resources:
    requests:
      cpu: "100m"
      memory: "512Mi"
    limits:
      cpu: "1000m"
      memory: "1024Mi"

# Repo server configuration
repoServer:
  resources:
    requests:
      cpu: "50m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

# Redis configuration
redis:
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "200m"
      memory: "256Mi"

# ApplicationSet controller configuration
applicationSet:
  enabled: true
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "200m"
      memory: "256Mi"

# Notifications controller (optional)
notifications:
  enabled: false

# DEX OIDC (disabled for now)
dex:
  enabled: false

# Custom resource definitions
crds:
  install: true
  keep: false
